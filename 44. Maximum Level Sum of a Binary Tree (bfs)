/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if (!root)
            return 0;

        queue<TreeNode*> q;
        q.push(root);

        int maxSum = INT_MIN; // To store the maximum sum
        int maxLevel = 0;     // To store the level with the maximum sum
        int currentLevel = 0; // To track the current level

        while (!q.empty()) {
            ++currentLevel; // Move to the next level
            int levelSize = q.size();
            int levelSum = 0;

            for (int i = 0; i < levelSize; ++i) {
                TreeNode* current = q.front();
                q.pop();

                levelSum += current->val;

                // Add children to the queue
                if (current->left)
                    q.push(current->left);
                if (current->right)
                    q.push(current->right);
            }

            // Update maximum sum and level
            if (levelSum > maxSum) {
                maxSum = levelSum;
                maxLevel = currentLevel;
            }
        }

        return maxLevel;
    }
};
