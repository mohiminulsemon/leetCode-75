class Solution {
public:
    string decodeString(string s) {
          stack<int> countStack;
        stack<string> stringStack;
        string currentString;
        int k = 0;
        
        for (char c : s) {
            if (isdigit(c)) {
                // Build the multiplier value for cases like "12[a]"
                k = k * 10 + (c - '0');
            } else if (c == '[') {
                // Push the current k and string to their respective stacks
                countStack.push(k);
                stringStack.push(currentString);
                // Reset for the new block
                k = 0;
                currentString.clear();
            } else if (c == ']') {
                // Pop the count and repeat the string
                int repeatTimes = countStack.top();
                countStack.pop();
                string decodedString = stringStack.top();
                stringStack.pop();
                
                // Build the decoded string
                for (int i = 0; i < repeatTimes; i++) {
                    decodedString += currentString;
                }
                // Update the current string with the newly built decoded string
                currentString = decodedString;
            } else {
                // Append character to the current string
                currentString += c;
            }
        }
        
        return currentString;
    }
};
