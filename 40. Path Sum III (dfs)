/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
        int pathSum(TreeNode* root, int targetSum) {
        unordered_map<long, int> prefixSumCount;
        prefixSumCount[0] = 1; // Base case for paths that sum to targetSum directly
        return dfs(root, 0, targetSum, prefixSumCount);
    }

private:
    int dfs(TreeNode* node, long currentSum, int targetSum, unordered_map<long, int>& prefixSumCount) {
        if (!node) return 0;

        // Update the current path sum
        currentSum += node->val;

        // Count the number of valid paths that end at the current node
        int numPaths = prefixSumCount[currentSum - targetSum];

        // Update the prefix sum count map with the current sum
        prefixSumCount[currentSum]++;

        // Recurse left and right
        numPaths += dfs(node->left, currentSum, targetSum, prefixSumCount);
        numPaths += dfs(node->right, currentSum, targetSum, prefixSumCount);

        // Backtrack: remove the current sum from the prefix sum map
        prefixSumCount[currentSum]--;

        return numPaths;
    }
};
