/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (!root)
            return nullptr; // Base case: node not found

        if (key < root->val) {
            root->left =
                deleteNode(root->left, key); // Search in the left subtree
        } else if (key > root->val) {
            root->right =
                deleteNode(root->right, key); // Search in the right subtree
        } else {
            // Node found, handle the deletion cases
            if (!root->left)
                return root->right; // Case 1 & 2: No left child
            if (!root->right)
                return root->left; // Case 1 & 2: No right child

            // Case 3: Node with two children
            TreeNode* successor =
                findMin(root->right);   // Find in-order successor
            root->val = successor->val; // Replace current node's value
            root->right =
                deleteNode(root->right, successor->val); // Delete successor
        }
        return root;
    }

private:
    TreeNode* findMin(TreeNode* node) {
        while (node->left)
            node = node->left;
        return node;
    }
};
