class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<bool> visited(n, false);
        int provinces = 0;

        // Helper function for DFS
        function<void(int)> dfs = [&](int city) {
            visited[city] = true;
            for (int neighbor = 0; neighbor < n; neighbor++) {
                if (isConnected[city][neighbor] == 1 && !visited[neighbor]) {
                    dfs(neighbor);
                }
            }
        };

        // Traverse all cities
        for (int i = 0; i < n; i++) {
            if (!visited[i]) { // New province found
                provinces++;
                dfs(i);
            }
        }

        return provinces;
    }
};
