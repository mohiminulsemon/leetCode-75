class Solution {
public:
    bool closeStrings(string word1, string word2) {
           if (word1.size() != word2.size()) {
            return false;
        }

        // Step 1: Check if both strings contain the same set of unique characters
        unordered_set<char> set1(word1.begin(), word1.end());
        unordered_set<char> set2(word2.begin(), word2.end());
        if (set1 != set2) {
            return false;
        }

        // Step 2: Count character frequencies
        unordered_map<char, int> freq1, freq2;
        for (char ch : word1) {
            freq1[ch]++;
        }
        for (char ch : word2) {
            freq2[ch]++;
        }

        // Step 3: Collect frequency values and sort them for both words
        vector<int> freqValues1, freqValues2;
        for (const auto& entry : freq1) {
            freqValues1.push_back(entry.second);
        }
        for (const auto& entry : freq2) {
            freqValues2.push_back(entry.second);
        }
        
        sort(freqValues1.begin(), freqValues1.end());
        sort(freqValues2.begin(), freqValues2.end());

        // Step 4: Check if the sorted frequency distributions match
        return freqValues1 == freqValues2;
    }
};
