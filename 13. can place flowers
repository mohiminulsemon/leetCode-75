class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int count = 0;
        int size = flowerbed.size();

        for (int i = 0; i < size; ++i) {
            if (flowerbed[i] == 0 &&
                (i == 0 || flowerbed[i - 1] == 0) &&
                (i == size - 1 || flowerbed[i + 1] == 0)) {

                // Simulate planting by skipping the next spot
                ++count;
                i++;  // Move to the next spot after planting

                if (count >= n) return true;  // Early exit if we planted enough
            }
        }

        return count >= n;
    }
};

/* flowerbed[i] == 0
This checks if the current plot at index i is empty.
If it’s already occupied (1), we skip to the next plot since no flower can be planted here.
(i == 0 || flowerbed[i - 1] == 0)
This ensures that the left plot (if it exists) is empty.
Case 1: If the current plot is the first plot (i == 0), there is no left plot, so this part of the condition is true.
Case 2: If it’s not the first plot, we check if the left plot (flowerbed[i - 1]) is empty.
(i == size - 1 || flowerbed[i + 1] == 0)
This ensures that the right plot (if it exists) is empty.
Case 1: If the current plot is the last plot (i == size - 1), there is no right plot, so this part of the condition is true.
Case 2: If it’s not the last plot, we check if the right plot (flowerbed[i + 1]) is empty. */

// solution - 2 ( less runtime ) 
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
          int size = flowerbed.size();

        for (int i = 0; i < size; i++) {
            // If the current plot is empty, and both neighbors are empty (or boundary cases)
            if (flowerbed[i] == 0 &&
                (i == 0 || flowerbed[i - 1] == 0) &&
                (i == size - 1 || flowerbed[i + 1] == 0)) {
                
                // Plant a flower here
                flowerbed[i] = 1;
                n--;  // Reduce the number of flowers to plant

                // Skip the next position to avoid adjacent flowers
                i++;
            }

            // If all flowers are planted, we can return true early
            if (n <= 0) return true;
        }

        return n <= 0;
    }
};
